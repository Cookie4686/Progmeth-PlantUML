@startuml
top to bottom direction
interface Clickable [[java:interfaces.Clickable]] {
	activatePerClick(): void
	isEnoughEnergy(): boolean
}
interface TurnActivable [[java:interfaces.TurnActivable]] {
	activatePerTurn(): void
}
interface StatUpdatable [[java:interfaces.StatUpdatable]] {
	statUpdate(): void
}
interface ReStatable [[java:interfaces.ReStatable]] {
	reStatBeforeUpdate(): void
}

abstract class Item [[java:game.item.Item]] {
	-tier: ItemTier
	-name: String
	-detail: String
	#width: int
	#height: int
	#isDiagonal: boolean
	#fadeIn: FadeTransition
	-diffX: double
	-diffY: double
	-imageView: ImageView
	-moveTimeline: Timeline
	-backToOriginTimeline: Timeline
	-currentTranslateY: double
	-tooltip: Tooltip
	+Item(name, detail, height, tier)
	+Item(name, detail, width, height, tier)
	+initialize(image: Image): void
	+updateTooltip(): void
	+delete(): void
	-calculateDiff(): void
	+rotate(right: boolean): void
	+getItemWidth(): int
	+getItemHeight(): int
	+isDiagonal(): boolean
	+getDiffX(): double
	+getDiffY(): double
	+getRotation(): ItemRotation
	+getName(): String
	+getTierName(): String
	+getImageView(): ImageView
	+getFadeIn(): FadeTransition
	+setFadeIn(fadeIn: FadeTransition): void
	+moveUpAndDown(): void
	+moveBack(): void
	+getMoveTimeline(): Timeline
	+setMoveTimeline(moveTimeline: Timeline): void
	+getCurrentTranslateY(): double
	+setCurrentTranslateY(currentTranslateY: double): void
}
abstract class ItemWithCost [[java:game.item.ItemWithCost]] {}
abstract class Relic [[java:game.item.relic.Relic]] {}
class Container [[java:game.item.consumable.Container]] {
	-damage: int
	+Container(name, detail, damage, width, height, tier)
	+isEnoughEnergy(): boolean
	+activatePerClick(): void
	+toString(): String
	+getDamage(): int
	+setDamage(damage: int): void
}
class ManaOrb [[java:game.item.ManaOrb]] {
	-amount: int
	+ManaOrb(name, detail, amount, width, height, tier)
	+activatePerTurn(): void
	+toString(): String
	+getAmount(): int
	+setAmount(amount: int): void
}
class Coins [[java:game.item.Coins]] {
	-amount: int
	+Coins(name, detail, amount, tier)
	+statUpdate(): void
	+isStackable(item: Item): boolean
	+toString(): String
	+getAmount(): int
	+setAmount(amount: int): void
}
abstract class Wearable [[java:game.item.wearable.Wearable]] {}
Pane <|-- Item
Item <|-- Coins
StatUpdatable <|.. Coins
Item <|-- ManaOrb
TurnActivable <|.. ManaOrb
Item <|-- ItemWithCost
Clickable <|.. ItemWithCost
Item <|-- Wearable
TurnActivable <|.. Wearable
StatUpdatable <|.. Wearable
ReStatable <|.. Wearable
Item <|-- Relic
Relic --> "*" Item : findItemInSlot()
Item <|-- Container
Clickable <|.. Container
@enduml