@startuml
abstract class Relic [[java:game.item.relic.Relic]] {
	-effect: Effect
	#range: int
	+Relic(name, detail, effect, range, width, height, tier)
	+Relic(name, detail, effect, range, height, tier)
	-increaseShield(items: ArrayList<Item>): void
	-increaseDamage(items: ArrayList<Item>): void
	+activate(): void
	#getProvide(): String
	+getEffectType(): EffectType
	+getEffectAmount(): int
	+getRange(): int
}
class Item {
}
Relic --> "*" Item : findItemInSlot()
class Item {
}
Item <|-- Relic
class PassiveRelic [[java:game.item.relic.PassiveRelic]] {
	+PassiveRelic(name, detail, effect, range, width, height, tier)
	+PassiveRelic(name, detail, effect, range, height, tier)
	+statUpdate(): void
	+toString(): String
}
class Relic {
}
Relic <|-- PassiveRelic
interface StatUpdatable {
}
StatUpdatable <|.. PassiveRelic
class Potion [[java:game.item.consumable.Potion]] {
	-{static} limit: int
	+Potion(name, detail, container, costActivate, durability, effect, width, height, tier)
	+isStackable(item: Item): boolean
	#getHeader(): String
	+toString(): String
	+getLimit(): int
}
class FoodWithContainer {
}
FoodWithContainer <|-- Potion
class ShieldItem [[java:game.item.ShieldItem]] {
	-effects: ArrayList<Effect>
	-shield: int
	+ShieldItem(name, detail, shield, effects, costActivate, width, height, tier)
	+activateItem(): void
	+toString(): String
}
class ItemWithCost {
}
ItemWithCost <|-- ShieldItem
class IncreaseCostWeapon [[java:game.item.weapon.IncreaseCostWeapon]] {
	-initCost: int
	-increaseCost: int
	+IncreaseCostWeapon(name, detail, effects, damage, costActivate, increaseCost, width, tier)
	+IncreaseCostWeapon(name, detail, effects, damage, costActivate, increaseCost, width, height, tier)
	+activatePerTurn(): void
	+activateItem(): void
	+toString(): String
}
class SpecialWeapon {
}
SpecialWeapon <|-- IncreaseCostWeapon
interface TurnActivable {
}
TurnActivable <|.. IncreaseCostWeapon
interface TurnActivable [[java:interfaces.TurnActivable]] {
	activatePerTurn(): void
}
class Weapon [[java:game.item.weapon.Weapon]] {
	-initDamage: int
	-damage: int
	+Weapon(name, detail, initDamage, costActivate, width, tier)
	+Weapon(name, detail, initDamage, costActivate, width, height, tier)
	+reStatBeforeUpdate(): void
	+activatePerClick(): void
	+activateItem(): void
	+getProvide(): String
	+toString(): String
	+getInitDamage(): int
	+getDamage(): int
	+setDamage(damage: int): void
	+addDamage(damage: int): void
}
class ItemWithCost {
}
ItemWithCost <|-- Weapon
interface ReStatable {
}
ReStatable <|.. Weapon
interface ReStatable [[java:interfaces.ReStatable]] {
	reStatBeforeUpdate(): void
}
class FoodWithContainer [[java:game.item.consumable.FoodWithContainer]] {
	-container: String
	+FoodWithContainer(name, detail, container, costActivate, durability, effect, width, height, tier)
	#getHeader(): String
	+toString(): String
	+getContainer(): String
}
class Consumable {
}
Consumable <|-- FoodWithContainer
class Helmet [[java:game.item.wearable.Helmet]] {
	+Helmet(name, detail, initialShield, increaseShield, effects, width, height, tier)
	-underSlot(): int
	+statUpdate(): void
	+toString(): String
}
class Wearable {
}
Wearable <|-- Helmet
abstract class Wearable [[java:game.item.wearable.Wearable]] {
	-effects: ArrayList<Effect>
	-initialShield: int
	-shield: int
	-increaseShield: int
	+Wearable(name, detail, initialShield, increaseShield, effects, width, height, tier)
	+reStatBeforeUpdate(): void
	+statUpdate(): void
	+activatePerTurn(): void
	#getProvide(): String
	+toString(): String
	+getEffects(): ArrayList<Effect>
	+getShield(): int
	+addShield(shield: int): void
	+setShield(shield: int): void
	+getInitialShield(): int
	+setIncreaseShield(increaseShield: int): void
	+getIncreaseShield(): int
}
class Item {
}
Item <|-- Wearable
interface TurnActivable {
}
TurnActivable <|.. Wearable
interface StatUpdatable {
}
StatUpdatable <|.. Wearable
interface ReStatable {
}
ReStatable <|.. Wearable
interface StatUpdatable [[java:interfaces.StatUpdatable]] {
	statUpdate(): void
}
class ActiveRelic [[java:game.item.relic.ActiveRelic]] {
	-costActivate: int
	-isUsed: boolean
	+ActiveRelic(name, detail, effect, costActivate, range, width, height, tier)
	+ActiveRelic(name, detail, effect, costActivate, range, height, tier)
	+isEnoughEnergy(): boolean
	+activatePerClick(): void
	+getCostActivate(): int
	+setCostActivate(costActivate: int): void
	+activatePerTurn(): void
	+toString(): String
}
class Relic {
}
Relic <|-- ActiveRelic
interface Clickable {
}
Clickable <|.. ActiveRelic
interface TurnActivable {
}
TurnActivable <|.. ActiveRelic
class ManaOrb [[java:game.item.ManaOrb]] {
	-amount: int
	+ManaOrb(name, detail, amount, width, height, tier)
	+activatePerTurn(): void
	+toString(): String
	+getAmount(): int
	+setAmount(amount: int): void
}
class Item {
}
Item <|-- ManaOrb
interface TurnActivable {
}
TurnActivable <|.. ManaOrb
abstract class ItemWithCost [[java:game.item.ItemWithCost]] {
	#costActivate: int
	+ItemWithCost(name, detail, costActivate, height, tier)
	+ItemWithCost(name, detail, costActivate, width, height, tier)
	+isEnoughEnergy(): boolean
	+activatePerClick(): void
	+{abstract} activateItem(): void
	+getCostActivate(): int
	+setCostActivate(costActivate: int): void
}
class Item {
}
Item <|-- ItemWithCost
interface Clickable {
}
Clickable <|.. ItemWithCost
class Container [[java:game.item.consumable.Container]] {
	-damage: int
	+Container(name, detail, damage, width, height, tier)
	+isEnoughEnergy(): boolean
	+activatePerClick(): void
	+toString(): String
	+getDamage(): int
	+setDamage(damage: int): void
}
class Item {
}
Item <|-- Container
interface Clickable {
}
Clickable <|.. Container
interface Clickable [[java:interfaces.Clickable]] {
	activatePerClick(): void
	isEnoughEnergy(): boolean
}
class ManaWeapon [[java:game.item.weapon.ManaWeapon]] {
	+ManaWeapon(name, detail, effects, damage, costActivate, width, tier)
	+ManaWeapon(name, detail, effects, damage, costActivate, width, height, tier)
	+isEnoughEnergy(): boolean
	+toString(): String
}
class SpecialWeapon {
}
SpecialWeapon <|-- ManaWeapon
class SpecialWeapon [[java:game.item.weapon.SpecialWeapon]] {
	-effects: ArrayList<Effect>
	+SpecialWeapon(name, detail, effects, damage, costActivate, width, tier)
	+SpecialWeapon(name, detail, effects, damage, costActivate, width, height, tier)
	+activateItem(): void
	+getProvide(): String
	+toString(): String
	+getEffects(): ArrayList<Effect>
}
class Weapon {
}
Weapon <|-- SpecialWeapon
abstract class Item [[java:game.item.Item]] {
	-tier: ItemTier
	-name: String
	-detail: String
	#width: int
	#height: int
	#isDiagonal: boolean
	#fadeIn: FadeTransition
	-diffX: double
	-diffY: double
	-imageView: ImageView
	-moveTimeline: Timeline
	-backToOriginTimeline: Timeline
	-currentTranslateY: double
	-tooltip: Tooltip
	+Item(name, detail, height, tier)
	+Item(name, detail, width, height, tier)
	+initialize(image: Image): void
	+updateTooltip(): void
	+delete(): void
	-calculateDiff(): void
	+rotate(right: boolean): void
	+getItemWidth(): int
	+getItemHeight(): int
	+isDiagonal(): boolean
	+getDiffX(): double
	+getDiffY(): double
	+getRotation(): ItemRotation
	+getName(): String
	+getTierName(): String
	+getImageView(): ImageView
	+getFadeIn(): FadeTransition
	+setFadeIn(fadeIn: FadeTransition): void
	+moveUpAndDown(): void
	+moveBack(): void
	+getMoveTimeline(): Timeline
	+setMoveTimeline(moveTimeline: Timeline): void
	+getCurrentTranslateY(): double
	+setCurrentTranslateY(currentTranslateY: double): void
}
class Pane {
}
Pane <|-- Item
class Armor [[java:game.item.wearable.Armor]] {
	+Armor(name, detail, initialShield, increaseShield, effects, width, height, tier)
	-isMeetCondition(item: Item, items: ArrayList<Item>): boolean
	-numberOfAdjacent(): int
	+statUpdate(): void
	+toString(): String
}
class Wearable {
}
Wearable <|-- Armor
class Coins [[java:game.item.Coins]] {
	-amount: int
	+Coins(name, detail, amount, tier)
	+statUpdate(): void
	+isStackable(item: Item): boolean
	+toString(): String
	+getAmount(): int
	+setAmount(amount: int): void
}
class Item {
}
Item <|-- Coins
interface StatUpdatable {
}
StatUpdatable <|.. Coins
class Shoes [[java:game.item.wearable.Shoes]] {
	+Shoes(name, detail, initialShield, increaseShield, effects, width, height, tier)
	-emptySpace(): int
	-isLowest(): boolean
	+statUpdate(): void
	+toString(): String
}
class Wearable {
}
Wearable <|-- Shoes
class Consumable [[java:game.item.consumable.Consumable]] {
	-effect: Effect
	-costActivate: int
	-durability: int
	+Consumable(name, detail, durability, effect, costActivate, width, height, tier)
	+activateItem(): void
	#getHeader(): String
	#getProvideMid(): String
	+toString(): String
	+getEffectType(): EffectType
	+getEffectAmount(): int
	+getDurability(): int
	+setDurability(durability: int): void
}
class ItemWithCost {
}
ItemWithCost <|-- Consumable
class DamageItem [[java:game.item.DamageItem]] {
	-AoE: boolean
	-effects: ArrayList<Effect>
	+DamageItem(name, detail, effects, costActivate, isAoE, width, height, tier)
	+activateItem(): void
	-activateEffect(effect: Effect, enemy: Entity): void
	+toString(): String
	+isAoE(): boolean
}
class ItemWithCost {
}
ItemWithCost <|-- DamageItem

@enduml